##引入宏定义
$!{define.vm}
##定义初始变量
$!{mybatisCodehelper.vm}
#set($controllerName = $tool.append($tableInfo.name, "Controller"))
##设置回调
#set($controllerSavePath = $tool.append(${controllerSrcFolder},"/",${controllerPackageName.replace(".","/")}))

$!callback.setSavePath($controllerSavePath)
$!callback.setFileName($tool.append($controllerName, ".java"))
##拿到主键
#if(!$tableInfo.pkColumn.isEmpty())
    #set($pk = $tableInfo.pkColumn.get(0))
#end

package ${controllerPackageName};

import $!{modelPackageName}.$!{entityName};
import ${servicePackageName}.$!{tableInfo.name}Service;
import org.springframework.web.bind.annotation.*;
import javax.annotation.Resource;
import java.util.List;
import lombok.extern.slf4j.Slf4j;
#if($useSwagger)
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
#end

##使用宏定义实现类注释信息
#tableComment("表控制层")
@RestController
@RequestMapping("$!tool.firstLowerCase($tableInfo.name)")
@Slf4j
#if($useSwagger)
@Api(value = "$!{tableInfo.comment}",tags = {"$!{tableInfo.comment}"})
#end
public class $!{controllerName} {
    /**
     * 服务对象
     */
    @Resource
    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;


    /**
     * 通过主键查询单条数据
     *
     * @param id 主键
     * @return 单条数据
     */
    @GetMapping("/get")
    #if($useSwagger)
    @ApiOperation("通过主键查询单条数据")
    #end
    public BaseResponse<$!{entityName}> getById($!pk.shortType id) {
        return ResultUtils.success($!{tool.firstLowerCase($tableInfo.name)}Service.queryById(id));
    }

    /**
     * 通过条件查询所有数据
     *
     * @param $!tool.firstLowerCase($!{entityName})QueryRequest 查询条件
     * @return List<$!{entityName}> 实例对象列表
     */
    @PostMapping("/list")
    #if($useSwagger)
    @ApiOperation("通过条件查询所有数据")
    #end
    public BaseResponse<List<$!{entityName}>> getList(@RequestBody $!{entityName}QueryRequest $!tool.firstLowerCase($!{entityName})QueryRequest){
        return ResultUtils.success($!{tool.firstLowerCase($tableInfo.name)}Service.queryAll($!tool.firstLowerCase($!{entityName})QueryRequest));
    }

    /**
     * 通过条件查询分页数据
     *
     * @param $!tool.firstLowerCase($!{entityName})QueryRequest 查询条件
     * @return List<$!{entityName}> 实例对象列表
     */
    @PostMapping("/page")
    #if($useSwagger)
    @ApiOperation("通过条件查询分页数据")
    #end
    public BaseResponse<PageInfo<$!{entityName}>> getPage(@RequestBody $!{entityName}QueryRequest $!tool.firstLowerCase($!{entityName})QueryRequest){
        return ResultUtils.success($!{tool.firstLowerCase($tableInfo.name)}Service.queryPage($!tool.firstLowerCase($!{entityName})QueryRequest));
    }

    /**
     * 根据条件统计总行数
     *
     * @param $!tool.firstLowerCase($!{entityName})QueryRequest 查询条件
     * @return 总行数
     */
    @PostMapping("/count")
    #if($useSwagger)
    @ApiOperation("根据条件统计总行数")
    #end
    public BaseResponse<Long> getCount(@RequestBody $!{entityName}QueryRequest $!tool.firstLowerCase($!{entityName})QueryRequest){
        return ResultUtils.success($!{tool.firstLowerCase($tableInfo.name)}Service.queryCount($!tool.firstLowerCase($!{entityName})QueryRequest));
    }

    /**
     * 新增数据
     *
     * @param $!{tool.firstLowerCase($entityName)}AddRequest 实体
     * @return 新增结果
     */
    @PostMapping("/add")
    #if($useSwagger)
    @ApiOperation("新增数据")
    #end
    public BaseResponse<$!{entityName}> add(@RequestBody $!{entityName}AddRequest $!{tool.firstLowerCase($entityName)}AddRequest) {
        return ResultUtils.success($!{tool.firstLowerCase($tableInfo.name)}Service.insert($!{tool.firstLowerCase($entityName)}AddRequest));
    }

    /**
     * 批量新增数据
     *
     * @param entities List<$!{entityName}AddRequest> 实例对象列表
     * @return 影响行数
     */
    @PostMapping("/addBatch")
    #if($useSwagger)
    @ApiOperation("批量新增数据")
    #end
    public BaseResponse<Integer> addBatch(@RequestBody List<$!{entityName}AddRequest> entities){
        return ResultUtils.success($!{tool.firstLowerCase($tableInfo.name)}Service.insertBatch(entities));
    }

    /**
     * 编辑数据
     *
     * @param $!{tool.firstLowerCase($entityName)}UpdateRequest 实体
     * @return 编辑结果
     */
    @PostMapping("/update")
    #if($useSwagger)
    @ApiOperation("编辑数据")
    #end
    public BaseResponse<$!{entityName}> update(@RequestBody $!{entityName}UpdateRequest $!{tool.firstLowerCase($entityName)}UpdateRequest) {
        return ResultUtils.success($!{tool.firstLowerCase($tableInfo.name)}Service.update($!{tool.firstLowerCase($entityName)}UpdateRequest));
    }

    /**
     * 通过主键集合批量删除数据
     *
     * @param deleteRequest 删除请求对象
     * @return 影响行数
     */
    @PostMapping("/delete")
    #if($useSwagger)
    @ApiOperation("通过主键集合批量删除数据")
    #end
    public BaseResponse<Integer> deleteBatchByIds(@RequestBody DeleteRequest deleteRequest){
        return ResultUtils.success($!{tool.firstLowerCase($tableInfo.name)}Service.deleteBatchByIds(deleteRequest));
    }
}
